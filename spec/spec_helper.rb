# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://relishapp.com/rspec/rspec-core/docs/configuration/zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end

  require 'shoulda-matchers'

  require "bundler/setup"
  ::Bundler.require(:default, :test)

  ::Shoulda::Matchers.configure do |config|
    config.integrate do |with|
      # Choose a test framework:
      with.test_framework :rspec
      #with.test_framework :minitest
      #with.test_framework :minitest_4
      #with.test_framework :test_unit

      # Choose one or more libraries:
      with.library :active_record
      with.library :active_model
      #with.library :action_controller
      # Or, choose the following (which implies all of the above):
      #with.library :rails
    end
  end

  require 'webmock/rspec'
  WebMock.disable_net_connect!(allow_localhost: true)

  RSpec.configure do |config|
    stubbed_response = '[{
      "id": 3899631,
      "title": "Ambipur air freshener plugin",
      "description": "Device only but refills are available most places",
      "donation_description": "",
      "collection": {
        "id": 0
      },
      "section": "product",
      "location": {
        "latitude": 51.7645,
        "longitude": -3.79131,
        "distance": 0,
        "town": "Ystalyfera",
        "country": "United Kingdom"
      },
      "collection_notes": "Any time!",
      "value": {
        "price": 0,
        "currency": "USD",
        "payment_type": "no_payment_type"
      },
      "created_at": "2020-12-12T10:49:18.000Z",
      "updated_at": "2020-12-12T10:49:18.000Z",
      "status": "active",
      "expiry": "2021-04-09T10:49:15.000Z",
      "reactions": {
        "likes": 0,
        "by_user": false,
        "views": 18,
        "impressions": 3571
      },
      "is_owner": true,
      "conversations": {
        "linked": 0,
        "request_id": null
      },
      "photos": [
        {
          "uid": "00gRGrBRDFYrR2j-9SJVYg",
          "files": {
            "original": "https://cdn.olioex.com/uploads/photo/file/00gRGrBRDFYrR2j-9SJVYg/image.jpg",
            "large": "https://cdn.olioex.com/uploads/photo/file/00gRGrBRDFYrR2j-9SJVYg/large_image.jpg",
            "medium": "https://cdn.olioex.com/uploads/photo/file/00gRGrBRDFYrR2j-9SJVYg/medium_image.jpg",
            "small": "https://cdn.olioex.com/uploads/photo/file/00gRGrBRDFYrR2j-9SJVYg/small_image.jpg"
          },
          "dimensions": {
            "width": 720,
            "height": 960
          }
        }
      ],
      "images": [
        {
          "uid": "00gRGrBRDFYrR2j-9SJVYg",
          "files": {
            "original": "https://cdn.olioex.com/uploads/photo/file/00gRGrBRDFYrR2j-9SJVYg/image.jpg",
            "large": "https://cdn.olioex.com/uploads/photo/file/00gRGrBRDFYrR2j-9SJVYg/large_image.jpg",
            "medium": "https://cdn.olioex.com/uploads/photo/file/00gRGrBRDFYrR2j-9SJVYg/medium_image.jpg",
            "small": "https://cdn.olioex.com/uploads/photo/file/00gRGrBRDFYrR2j-9SJVYg/small_image.jpg"
          },
          "dimensions": {
            "width": 720,
            "height": 960
          }
        }
      ],
      "user": {
        "id": 8039,
        "first_name": "Lloyd",
        "current_avatar": {
          "original": "https://cdn.olioex.com/uploads/avatar/file/oZq8DF3dzLEi3Fnf4XxMrg/image.jpg",
          "large": "https://cdn.olioex.com/uploads/avatar/file/oZq8DF3dzLEi3Fnf4XxMrg/large_image.jpg",
          "small": "https://cdn.olioex.com/uploads/avatar/file/oZq8DF3dzLEi3Fnf4XxMrg/small_image.jpg"
        },
        "roles": [
          "Consumer",
          "Food Waste Hero",
          "Volunteer",
          "Administrator"
        ],
        "location": {
          "latitude": 51.7645,
          "longitude": -3.79133
        },
        "rating": {
          "rating": 10,
          "number": 15
        },
        "verifications": [
          {
            "method": "sms"
          },
          {
            "method": "facebook"
          }
        ]
      },
      "first": false,
      "last_listed": "2020-12-12T10:49:18.000Z",
      "pickups": {
        "multiple": false,
        "users": [ ],
        "items": 1
      },
      "veteran_delay": 0
    }]'
    config.before(:each) do
      stub_request(:get, /s3-eu-west-1.amazonaws.com/).
        with(headers: {'Accept'=>'*/*', 'User-Agent'=>'Ruby'}).
        to_return(status: 200, body: stubbed_response, headers: {})
    end
  end

end
